{
  "_args": [
    [
      {
        "raw": "angular-ivh-treeview",
        "scope": null,
        "escapedName": "angular-ivh-treeview",
        "name": "angular-ivh-treeview",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\docs\\Documents\\Repositorios\\SEKC"
    ]
  ],
  "_from": "angular-ivh-treeview@latest",
  "_id": "angular-ivh-treeview@2.0.0-alpha.4",
  "_inCache": true,
  "_location": "/angular-ivh-treeview",
  "_nodeVersion": "7.7.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/angular-ivh-treeview-2.0.0-alpha.4.tgz_1496953201696_0.8654200884047896"
  },
  "_npmUser": {
    "name": "jtrussell",
    "email": "jus.russell@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular-ivh-treeview",
    "scope": null,
    "escapedName": "angular-ivh-treeview",
    "name": "angular-ivh-treeview",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/angular-ivh-treeview/-/angular-ivh-treeview-2.0.0-alpha.4.tgz",
  "_shasum": "788e46a921d1be2fcc2c411bab4d1b13a13f7eb0",
  "_shrinkwrap": null,
  "_spec": "angular-ivh-treeview",
  "_where": "D:\\docs\\Documents\\Repositorios\\SEKC",
  "author": {
    "name": "jtrussell"
  },
  "bugs": {
    "url": "https://github.com/ivantage/angular-ivh-treeview/issues"
  },
  "dependencies": {},
  "description": "Treeview for angular with filtering and checkboxes",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-bump": "0.0.14",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-concat": "^0.4.0",
    "grunt-contrib-cssmin": "^0.10.0",
    "grunt-contrib-jasmine": "^1.1.0",
    "grunt-contrib-jshint": "^1.0.0",
    "grunt-contrib-less": "^0.11.2",
    "grunt-contrib-uglify": "^0.5.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-jscs": "^1.8.0",
    "matchdep": "^0.3.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "788e46a921d1be2fcc2c411bab4d1b13a13f7eb0",
    "tarball": "https://registry.npmjs.org/angular-ivh-treeview/-/angular-ivh-treeview-2.0.0-alpha.4.tgz"
  },
  "gitHead": "6871fd51e97f720a21742402a3b1338af9b855fa",
  "homepage": "https://github.com/ivantage/angular-ivh-treeview",
  "keywords": [
    "angular",
    "tree",
    "treeview"
  ],
  "license": "MIT",
  "main": "gruntfile.js",
  "maintainers": [
    {
      "name": "jtrussell",
      "email": "jus.russell@gmail.com"
    }
  ],
  "name": "angular-ivh-treeview",
  "optionalDependencies": {},
  "readme": "# Angular IVH Treeview\r\n\r\n[ ![Build Status][travis-img] ][travis-link]\r\n\r\n> A treeview for AngularJS with filtering, checkbox support, custom templates,\r\n> and more.\r\n\r\n## Contents\r\n\r\n- [Getting Started](#getting-started)\r\n- [Example Usage](#example-usage)\r\n- [Options](#options)\r\n  - [Filtering](#filtering)\r\n  - [Expanded by Default](#expanded-by-default)\r\n  - [Default Selected State](#default-selected-state)\r\n  - [Validate on Startup](#validate-on-startup)\r\n  - [Twisties](#twisties)\r\n  - [Templates and Skins](#templates-and-skins)\r\n  - [Toggle Handlers](#toggle-handlers)\r\n  - [Select/Deselect Handlers](#selectdeselect-handlers)\r\n- [All the Options](#all-the-options)\r\n- [Treeview Manager Service](#treeview-manager-service)\r\n    - [`ivhTreeviewMgr.select(tree, node[, opts][, isSelected])`](#ivhtreeviewmgrselecttree-node-opts-isselected)\r\n    - [`ivhTreeviewMgr.selectAll(tree[, opts][, isSelected])`](#ivhtreeviewmgrselectalltree-opts-isselected)\r\n    - [`ivhTreeviewMgr.selectEach(tree, nodes[, opts][, isSelected])`](#ivhtreeviewmgrselecteachtree-nodes-opts-isselected)\r\n    - [`ivhTreeviewMgr.deselect(tree, node[, opts])`](#ivhtreeviewmgrdeselecttree-node-opts)\r\n    - [`ivhTreeviewMgr.deselectAll(tree[, opts])`](#ivhtreeviewmgrdeselectalltree-opts)\r\n    - [`ivhTreeviewMgr.deselectEach(tree, nodes[, opts])`](#ivhtreeviewmgrdeselecteachtree-nodes-opts)\r\n    - [`ivhTreeviewMgr.expand(tree, node[, opts][, isExpanded])`](#ivhtreeviewmgrexpandtree-node-opts-isexpanded)\r\n    - [`ivhTreeviewMgr.expandRecursive(tree[, node[, opts][,isExpanded]])`](#ivhtreeviewmgrexpandrecursivetree-node-opts-isexpanded)\r\n    - [`ivhTreeviewMgr.expandTo(tree, node[, opts][, isExpanded])`](#ivhtreeviewmgrexpandtotree-node-opts-isexpanded)\r\n    - [`ivhTreeviewMgr.collapse(tree, node[, opts])`](#ivhtreeviewmgrcollapsetree-node-opts)\r\n    - [`ivhTreeviewMgr.collapseRecursive(tree[, node[, opts]])`](#ivhtreeviewmgrcollapserecursivetree-node-opts)\r\n    - [`ivhTreeviewMgr.collapseParents(tree, node[, opts])`](#ivhtreeviewmgrcollapseparentstree-node-opts)\r\n    - [`ivhTreeviewMgr.validate(tree[, opts][, bias])`](#ivhtreeviewmgrvalidatetree-opts-bias)\r\n- [Dynamic Changes](#dynamic-changes)\r\n- [Tree Traversal](#tree-traversal)\r\n    - [`ivhTreeviewBfs(tree[, opts][, cb])`](#ivhtreeviewbfstree-opts-cb)\r\n- [Optimizations and Known Limitations](#optimizations-and-known-limitations)\r\n- [Reporting Issues](#reporting-issues)\r\n- [Contributing](#contributing)\r\n- [Release History](#release-history)\r\n- [License](#license)\r\n\r\n\r\n## Getting Started\r\n\r\nIVH Treeview can be installed with bower and npm:\r\n\r\n```\r\nbower install angular-ivh-treeview\r\n# or\r\nnpm install angular-ivh-treeview\r\n```\r\n\r\nOnce installed, include the following files in your app:\r\n\r\n- `dist/ivh-treeview.js`\r\n- `dist/ivh-treeview.css`\r\n- `dist/ivh-treeview-theme-basic.css` (optional minimalist theme)\r\n\r\nAnd add the `ivh.treeview` module to your main Angular module:\r\n\r\n```javascript\r\nangular.module('myApp', [\r\n  'ivh.treeview'\r\n  // other module dependencies...\r\n]);\r\n```\r\n\r\nYou're now ready to use the `ivh-treeview` directive, `ivhTreeviewMgr` service,\r\nand `ivhTreeviewBfs` service.\r\n\r\n## Example Usage\r\n\r\nIn your controller...\r\n\r\n```javascript\r\napp.controller('MyCtrl', function() {\r\n  this.bag = [{\r\n      label: 'Glasses',\r\n      value: 'glasses',\r\n      children: [{\r\n        label: 'Top Hat',\r\n        value: 'top_hat'\r\n      },{\r\n        label: 'Curly Mustache',\r\n        value: 'mustachio'\r\n      }]\r\n  }];\r\n\r\n  this.awesomeCallback = function(node, tree) {\r\n    // Do something with node or tree\r\n  };\r\n\r\n  this.otherAwesomeCallback = function(node, isSelected, tree) {\r\n    // Do soemthing with node or tree based on isSelected\r\n  }\r\n});\r\n```\r\n\r\nIn your view...\r\n\r\n```html\r\n<div ng-controller=\"MyCtrl as fancy\">\r\n  <input type=\"text\" ng-model=\"bagSearch\" />\r\n\r\n  <div\r\n    ivh-treeview=\"fancy.bag\"\r\n    ivh-treeview-filter=\"bagSearch\">\r\n  </div>\r\n</div>\r\n```\r\n\r\n## Options\r\n\r\nIVH Treeview is pretty configurable. By default it expects your elements to have\r\n`label` and `children` properties for node display text and child nodes\r\n respectively. It'll also make use of a `selected` attribute to manage selected\r\nstates. If you would like to pick out nodes by ID rather than reference it'll\r\nalso use an `id` attribute. Those attributes can all be changed, for example:\r\n\r\n```html\r\n<div ng-controller=\"MyCtrl as fancy\">\r\n  <div ivh-treeview=\"fancy.bag\"\r\n    ivh-treeview-id-attribute=\"'uuid'\"\r\n    ivh-treeview-label-attribute=\"'text'\"\r\n    ivh-treeview-children-attribute=\"'items'\"\r\n    ivh-treeview-selected-attribute=\"'isSelected'\">\r\n</div>\r\n```\r\n\r\nIVH Treeview attaches checkboxes to each item in your tree for a hierarchical\r\nselection model. If you'd rather not have these checkboxes use\r\n`ivh-treeview-use-checkboxes=\"false\"`:\r\n\r\n```html\r\n<div ng-controller=\"MyCtrl as fancy\">\r\n  <div ivh-treeview=\"fancy.bag\"\r\n    ivh-treeview-use-checkboxes=\"false\">\r\n</div>\r\n```\r\n\r\nThere's also a provider if you'd like to change the global defaults:\r\n\r\n```javascript\r\napp.config(function(ivhTreeviewOptionsProvider) {\r\n  ivhTreeviewOptionsProvider.set({\r\n    idAttribute: 'id',\r\n    labelAttribute: 'label',\r\n    childrenAttribute: 'children',\r\n    selectedAttribute: 'selected',\r\n    useCheckboxes: true,\r\n    expandToDepth: 0,\r\n    indeterminateAttribute: '__ivhTreeviewIndeterminate',\r\n    expandedAttribute: '__ivhTreeviewExpanded',\r\n    defaultSelectedState: true,\r\n    validate: true,\r\n    twistieExpandedTpl: '(-)',\r\n    twistieCollapsedTpl: '(+)',\r\n    twistieLeafTpl: 'o',\r\n    nodeTpl: '...'\r\n  });\r\n});\r\n```\r\n\r\nNote that you can also use the `ivhTreeviewOptions` service to inspect global\r\noptions at runtime. For an explanation of each option see the comments in the\r\n[source for ivhTreeviewOptions][trvw-opts].\r\n\r\n```javascript\r\napp.controller('MyCtrl', function(ivhTreeviewOptions) {\r\n  var opts = ivhTreeviewOptions();\r\n\r\n  // opts.idAttribute === 'id'\r\n  // opts.labelAttribute === 'label'\r\n  // opts.childrenAttribute === 'children'\r\n  // opts.selectedAttribute === 'selected'\r\n  // opts.useCheckboxes === true\r\n  // opts.expandToDepth === 0\r\n  // opts.indeterminateAttribute === '__ivhTreeviewIndeterminate'\r\n  // opts.expandedAttribute === '__ivhTreeviewExpanded'\r\n  // opts.defaultSelectedState === true\r\n  // opts.validate === true\r\n  // opts.twistieExpandedTpl === '(-)'\r\n  // opts.twistieCollapsedTpl === '(+)'\r\n  // opts.twistieLeafTpl === 'o'\r\n  // opts.nodeTpl =(eh)= '...'\r\n});\r\n\r\n```\r\n\r\n\r\n### Filtering\r\n\r\nWe support filtering through the `ivh-treeview-filter` attribute, this value is\r\nsupplied to Angular's `filterFilter` and applied to each node individually.\r\n\r\nIVH Treeview uses `ngHide` to hide filtered out nodes. If you would like to\r\ncustomize the hide/show behavior of nodes as they are filtered in and out of\r\nview (e.g. with `ngAnimate`) you can target elements with elements with the\r\n`.ivh-treeview-node` class:\r\n\r\n```css\r\n/* with e.g. keyframe animations */\r\n.ivh-treeview-node.ng-enter {\r\n  animation: my-enter-animation 0.5s linear;\r\n}\r\n\r\n.ivh-treeview-node.ng-leave {\r\n  animation: my-leave-animation 0.5s linear;\r\n}\r\n\r\n/* or class based animations */\r\n.ivh-treeview-node.ng-hide {\r\n  transition: 0.5s linear all;\r\n  opacity: 0;\r\n}\r\n\r\n/* alternatively, just strike-through filtered out nodes */\r\n.ivh-treeview-node.ng-hide {\r\n  display: block !important;\r\n}\r\n\r\n.ivh-treeview-node.ng-hide .ivh-treeview-node-label {\r\n  color: red;\r\n  text-decoration: line-through;\r\n}\r\n```\r\n\r\n***Demo***: [Filtering](http://jsbin.com/zitiri/edit?html,output)\r\n\r\n### Expanded by Default\r\n\r\nIf you want the tree to start out expanded to a certain depth use the\r\n`ivh-treeview-expand-to-depth` attribute:\r\n\r\n```html\r\n<div ng-controller=\"MyCtrl as fancy\">\r\n  <div\r\n    ivh-treeview=\"fancy.bag\"\r\n    ivh-treeview-expand-to-depth=\"2\"\r\n    ivh-treeview-use-checkboxes=\"false\">\r\n</div>\r\n```\r\n\r\nYou can also use the `ivhTreeviewOptionsProvider` to set a global default.\r\n\r\nIf you want the tree *entirely* expanded use a depth of `-1`. Providing a depth\r\ngreater than your tree's maximum depth will cause the entire tree to be\r\ninitially expanded.\r\n\r\n***Demo***: [Expand to depth on\r\nload](http://jsbin.com/ruxedo/edit?html,js,output)\r\n\r\n### Default Selected State\r\n\r\nWhen using checkboxes you can have a default selected state of `true` or\r\n`false`. The default selected state is used when validating your tree data with\r\n`ivhTreeviewMgr.validate` which will assume this state if none is specified,\r\ni.e. any node without a selected state will assume the default state.\r\nFuthermore, when `ivhTreeviewMgr.validate` finds a node whose selected state\r\ndiffers from the default it will assign the same state to each of that node's\r\nchildred, parent nodes are updated accordingly.\r\n\r\nUse `ivh-treeview-default-selected-state` attribute or `defaultSelectedState`\r\noption to set this property.\r\n\r\n***Demo***: [Default selected state and validate on\r\nstartup](http://jsbin.com/pajeze/2/edit)\r\n\r\n### Validate on Startup\r\n\r\n`ivh.treeview` will not assume control of your model on startup if you do not\r\nwant it to. You can opt out of validation on startup by setting\r\n`ivh-treeview-validate=\"false\"` at the attribute level or by globally setting\r\nthe `validate` property in `ivhTreeviewOptionsProvider`.\r\n\r\n***Demo***: [Default selected state and validate on\r\nstartup](http://jsbin.com/pajeze/2/edit)\r\n\r\n### Twisties\r\n\r\nThe basic twisties that ship with this `ivh.treeview` are little more than ASCII\r\nart. You're encouraged to use your own twistie templates. For example, if you've\r\ngot bootstrap on your page you might do something like this:\r\n\r\n```javascript\r\nivhTreeviewOptionsProvider.set({\r\n  twistieCollapsedTpl: '<span class=\"glyphicon glyphicon-chevron-right\"></span>',\r\n  twistieExpandedTpl: '<span class=\"glyphicon glyphicon-chevron-down\"></span>',\r\n  twistieLeafTpl: '&#9679;'\r\n});\r\n```\r\n\r\nIf you need different twistie templates for different treeview elements you can\r\nassign these templates at the attribute level:\r\n\r\n```html\r\n<div\r\n  ivh-treeview=\"fancy.bag\"\r\n  ivh-treeview-twistie-leaf-tpl=\"'-->'\">\r\n</div>\r\n```\r\n\r\nAlternatively, you can pass them as part of a [full configuration\r\nobject](https://github.com/iVantage/angular-ivh-treeview#all-the-options).\r\n\r\n\r\n***Demo***: [Custom twisties](http://jsbin.com/gizofu/edit?html,js,output)\r\n\r\n### Templates and Skins\r\n\r\nIVH Treeview allows you to fully customize your tree nodes. See\r\n[docs/templates-and-skins.md](docs/templates-and-skins.md) for demos and\r\ndetails.\r\n\r\n### Toggle Handlers\r\n\r\nWant to register a callback for whenever a user expands or collapses a node? Use\r\nthe `ivh-treeview-on-toggle` attribute. Your expression will be evaluated with\r\nthe following local variables: `ivhNode`, the node that was toggled; `ivhTree`,\r\nthe tree it belongs to; `ivhIsExpanded`, whether or not the node is now\r\nexpanded.\r\n\r\n```html\r\n<div ng-controller=\"MyCtrl as fancy\">\r\n  <div\r\n    ivh-treeview=\"fancy.bag\"\r\n    ivh-treeview-on-toggle=\"fancy.awesomeCallback(ivhNode, ivhIsExpanded, ivhTree)\">\r\n</div>\r\n```\r\n\r\nYou may also supply a toggle handler as a function (rather than an angular\r\nexpression) using `ivh-treeview-options` or by setting a global `onToggle`\r\noption. In this case the function will be passed a single object with `ivhNode`\r\nand `ivhTree` properties.\r\n\r\n***Demo***: [Toggle Handler](http://jsbin.com/xegari/edit)\r\n\r\n### Select/Deselect Handlers\r\n\r\nWant to be notified any time a checkbox changes state as the result of a click?\r\nUse the `ivh-treeview-on-cb-change` attribute. Your expression will be evaluated\r\nwhenever a node checkbox changes state with the following local variables:\r\n`ivhNode`, the node whose selected state changed; `ivhIsSelected`, the new\r\nselected state of the node; and `ivhTree`, the tree `ivhNode` belongs to.\r\n\r\nYou may also supply a selected handler as a function (rather than an angular\r\nexpression) using `ivh-treeview-options` or by setting a global `onCbChange`\r\noption. In this case the function will be passed a single object with `ivhNode`,\r\n`ivhIsSelected`, and `ivhTree` properties.\r\n\r\nNote that programmatic changes to a node's selected state (including selection\r\nchange propagation) will not trigger this callback. It is only run for the\r\nactual node clicked on by a user.\r\n\r\n```html\r\n<div ng-controller=\"MyCtrl as fancy\">\r\n  <div\r\n    ivh-treeview=\"fancy.bag\"\r\n    ivh-treeview-on-cb-change=\"fancy.otherAwesomeCallback(ivhNode, ivhIsSelected, ivhTree)\">\r\n</div>\r\n```\r\n\r\n***Demo***: [Select/Deselect Handler](http://jsbin.com/febexe/edit)\r\n\r\n\r\n## All the Options\r\n\r\nIf passing a configuration object is more your style than inlining everything in\r\nthe view, that's OK too.\r\n\r\nIn your fancy controller...\r\n\r\n```javascript\r\nthis.customOpts = {\r\n  useCheckboxes: false,\r\n  onToggle: this.awesomeCallback\r\n};\r\n```\r\n\r\nIn your view...\r\n\r\n```html\r\n<div\r\n    ivh-treeview=\"fancy.bag\"\r\n    ivh-treeview-options=\"fancy.customOpts\">\r\n</div>\r\n```\r\n\r\nAny option that can be set with `ivhTreeviewOptionsProvider` can be overriden\r\nhere.\r\n\r\n\r\n## Treeview Manager Service\r\n\r\n`ivh.treeview` supplies a service, `ivhTreeviewMgr`, for interacting with your\r\ntree data directly.\r\n\r\n#### `ivhTreeviewMgr.select(tree, node[, opts][, isSelected])`\r\n\r\nSelect (or deselect) an item in `tree`, `node` can be either a reference to the\r\nactual tree node or its ID.\r\n\r\nWe'll use settings registered with `ivhTreeviewOptions` by default, but you can\r\noverride any of them with the optional `opts` parameter.\r\n\r\n`isSelected` is also optional and defaults to `true` (i.e. the node will be\r\nselected).\r\n\r\nWhen an item is selected each of its children are also selected and the\r\nindeterminate state of each of the node's parents is validated.\r\n\r\n***Demo***: [Programmatic select/deselect](http://jsbin.com/kotohu/edit)\r\n\r\n#### `ivhTreeviewMgr.selectAll(tree[, opts][, isSelected])`\r\n\r\nLike `ivhTreeviewMgr.select` except every node in `tree` is either selected or\r\ndeselected.\r\n\r\n***Demo***: [Programmatic selectAll/deselectAll](http://jsbin.com/buhife/edit)\r\n\r\n#### `ivhTreeviewMgr.selectEach(tree, nodes[, opts][, isSelected])`\r\n\r\nLike `ivhTreeviewMgr.select` except an array of nodes (or node IDs) is used.\r\nEach node in `tree` corresponding to one of the passed `nodes` will be selected\r\nor deselected.\r\n\r\n***Demo***: [Programmatic selectEach/deselectEach](http://jsbin.com/burigo/edit)\r\n\r\n#### `ivhTreeviewMgr.deselect(tree, node[, opts])`\r\n\r\nA convenience method, delegates to `ivhTreeviewMgr.select` with `isSelected` set\r\nto `false`.\r\n\r\n***Demo***: [Programmatic select/deselect](http://jsbin.com/kotohu/edit)\r\n\r\n#### `ivhTreeviewMgr.deselectAll(tree[, opts])`\r\n\r\nA convenience method, delegates to `ivhTreeviewMgr.selectAll` with `isSelected`\r\nset to `false`.\r\n\r\n***Demo***: [Programmatic selectAll/deselectAll](http://jsbin.com/buhife/edit)\r\n\r\n#### `ivhTreeviewMgr.deselectEach(tree, nodes[, opts])`\r\n\r\nA convenience method, delegates to `ivhTreeviewMgr.selectEach` with `isSelected`\r\nset to `false`.\r\n\r\n***Demo***: [Programmatic selectEach/deselectEach](http://jsbin.com/burigo/edit)\r\n\r\n#### `ivhTreeviewMgr.expand(tree, node[, opts][, isExpanded])`\r\n\r\nExpand (or collapse) a given `node` in `tree`, again `node` may be an actual\r\nobject reference or an ID.\r\n\r\nWe'll use settings registered with `ivhTreeviewOptions` by default, but you can\r\noverride any of them with the optional `opts` parameter.\r\n\r\nBy default this method will expand the node in question, you may pass `false` as\r\nthe last parameter though to collapse the node. Or, just use\r\n`ivhTreeviewMgr.collapse`.\r\n\r\n***Demo***: [Programmatic expand/collapse](http://jsbin.com/degofo/edit?html,js,output)\r\n\r\n#### `ivhTreeviewMgr.expandRecursive(tree[, node[, opts][, isExpanded]])`\r\n\r\nExpand (or collapse) `node` and all its child nodes. Note that you may omit the\r\n`node` parameter (i.e. expand/collapse the entire tree) but only when all other\r\noption parameters are also omitted.\r\n\r\n***Demo***: [Programmatic recursive expand/collapse](http://jsbin.com/wugege/edit)\r\n\r\n#### `ivhTreeviewMgr.expandTo(tree, node[, opts][, isExpanded])`\r\n\r\nExpand (or collapse) all parents of `node`. This may be used to \"reveal\" a\r\nnested node or to recursively collapse all parents of a node.\r\n\r\n***Demo***: [Programmatic reveal/hide](http://jsbin.com/musodi/edit)\r\n\r\n#### `ivhTreeviewMgr.collapse(tree, node[, opts])`\r\n\r\nA convenience method, delegates to  `ivhTreeviewMgr.expand` with `isExpanded`\r\nset to `false`.\r\n\r\n#### `ivhTreeviewMgr.collapseRecursive(tree[, node[, opts]])`\r\n\r\nA convenience method, delegates to `ivhTreeviewMgr.expandRecursive` with\r\n`isExpanded` set to `false`,\r\n\r\n***Demo***: [Programmatic recursive expand/collapse](http://jsbin.com/wugege/edit)\r\n\r\n#### `ivhTreeviewMgr.collapseParents(tree, node[, opts])`\r\n\r\nA convenience method, delegates to `ivhTreeviewMgr.expandTo` with `isExpanded`\r\nset to `false`.\r\n\r\n***Demo***: [Programmatic reveal/hide](http://jsbin.com/musodi/edit)\r\n\r\n#### `ivhTreeviewMgr.validate(tree[, opts][, bias])`\r\n\r\nValidate a `tree` data store, `bias` is a convenient redundancy for\r\n`opts.defaultSelectedState`.\r\n\r\nWhen validating tree data we look for the first node in each branch which has a\r\nselected state defined that differs from `opts.defaultSelectedState` (or\r\n`bias`). Each of that node's children are updated to match the differing node\r\nand parent indeterminate states are updated.\r\n\r\n***Demo***: [Programmatic select/deselect](http://jsbin.com/bexedi/edit)\r\n\r\n## Dynamic Changes\r\n\r\nAdding and removing tree nodes on the fly is supported. Just keep in mind that\r\nadded nodes do not automatically inherit selected states (i.e. checkbox states)\r\nfrom their parent nodes. Similarly, adding new child nodes does not cause parent\r\nnodes to automatically validate their own selected states. You will typically\r\nwant to use `ivhTreeviewMgr.validate` or `ivhTreeviewMgr.select` after adding\r\nnew nodes to your tree:\r\n\r\n```javascript\r\n// References to the tree, parent node, and children...\r\nvar tree = getTree()\r\n  , parent = getParent()\r\n  , newNodes = [{label: 'Hello'},{label: 'World'}];\r\n\r\n// Attach new children to parent node\r\nparent.children = newNodes;\r\n\r\n// Force revalidate on tree given parent node's selected status\r\nivhTreeviewMgr.select(myTree, parent, parent.selected);\r\n```\r\n\r\n## Tree Traversal\r\n\r\nThe internal tree traversal service is exposed as `ivhTreeviewBfs` (bfs -->\r\nbreadth first search).\r\n\r\n#### `ivhTreeviewBfs(tree[, opts][, cb])`\r\n\r\nWe perform a breadth first traversal of `tree` applying the function `cb` to\r\neach node as it is reached. `cb` is passed two parameters, the node itself and\r\nan array of parents nodes ordered nearest to farthest. If the `cb` returns\r\n`false` traversal of that branch is stopped.\r\n\r\nNote that even if `false` is returned each of `nodes` siblings will still be\r\ntraversed. Essentially none of `nodes` children will be added to traversal\r\nqueue. All other branches in `tree` will be traversed as normal.\r\n\r\nIn other words returning `false` tells `ivhTreeviewBfs` to go no deeper in the\r\ncurrent branch only.\r\n\r\n***Demo***: [`ivhTreeviewBfs` in\r\naction](http://jsbin.com/wofunu/1/edit?html,js,output)\r\n\r\n\r\n## Optimizations and Known Limitations\r\n\r\n### Performance at Scale\r\n\r\nThe default node template assumes a reasonable number of tree nodes. As your\r\ntree grows (3k-10k+ nodes) you will likely notice a significant dip in\r\nperformance. This can be mitigated by using a custom template with a few easy\r\ntweaks.\r\n\r\n**Only process visible nodes** by adding an `ng-if` to the\r\n`ivh-treeview-children` element. This small change will result in significant\r\nperformance boosts for large trees as now only the visible nodes (i.e. nodes\r\nwith all parents expanded) will be processed. This change will likely be added\r\nto the default template in version 1.1.\r\n\r\n**Use Angular's bind-once syntx in a custom template**. The default template\r\nsupports angular@1.2.x and so does not leverage the native double-colon syntax\r\nto make one time bindings. By binding once where possible you can trim a large\r\nnumber of watches from your trees.\r\n\r\n### Known Issues\r\n\r\n- Creating multiple treeviews within an ngRepeat loops creates an issue where\r\n  each treeview accesses the same controller instance after initial load. See\r\n  issue #113.\r\n- We use Angular's `filterFilter` for filtering, by default this compares your\r\n  filter string with at all object attributes. This directive attaches an\r\n  attribute to your tree nodes to track its selected state (e.g.  `selected:\r\n  false`). If you want your filter to ignore the selection tracking attribute\r\n  use an object or function filter. See issue #151.\r\n\r\n## Reporting Issues and Getting Help\r\n\r\nWhen reporting an issue please take a moment to reproduce your setup by\r\nmodifying our [starter template](http://jsbin.com/wecafa/2/edit). Only make as\r\nmany changes as necessary to demonstrate your issue but do comment your added\r\ncode.\r\n\r\nPlease use Stack Overflow for general questions and help with implementation.\r\n\r\n\r\n## Contributing\r\n\r\nPlease see our consolidated [contribution\r\nguidelines](https://github.com/iVantage/Contribution-Guidelines).\r\n\r\n\r\n## Release History\r\n\r\n- 2015-11-29 v1.0.2 Allow numeric ids as well ass tring ids\r\n- 2015-09-23 v1.0.0 Use expressions rather than callbacks for change/toggle\r\n  handlers, update default template. See MIGRATING doc for breaking changes.\r\n- 2015-05-06 v0.10.0 Make node templates customizable\r\n- 2015-02-10 v0.9.0 All options are set-able via attributes or config object\r\n- 2015-01-02 v0.8.0 Add ability to expand/collapse nodes programmatically\r\n- 2014-09-21 v0.6.0 Tree accepts nodes added on the fly\r\n- 2014-09-09 v0.3.0 Complete refactor. Directive no longer propagates changes\r\n  automatically on programmatic changes, use ivhTreeviewMgr.\r\n- 2014-08-25 v0.2.0 Allow for initial expansion\r\n- 2014-06-20 v0.1.0 Initial release\r\n\r\n\r\n## License\r\n\r\n[MIT license][license], copyright iVantage Health Analytics, Inc.\r\n\r\n[license]: https://raw.github.com/iVantage/angular-ivh-treeview/master/LICENSE-MIT\r\n[bootstrap]: http://getbootstrap.com/\r\n[travis-img]: https://travis-ci.org/iVantage/angular-ivh-treeview.svg?branch=master\r\n[travis-link]: https://travis-ci.org/iVantage/angular-ivh-treeview\r\n[trvw-opts]: https://github.com/iVantage/angular-ivh-treeview/blob/master/src/scripts/services/ivh-treeview-options.js#L13-L103\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ivantage/angular-ivh-treeview.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "2.0.0-alpha.4"
}
